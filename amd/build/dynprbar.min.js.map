{"version":3,"file":"dynprbar.min.js","sources":["../src/dynprbar.js"],"sourcesContent":["import {getActivityCompletion} from './repository';\nimport {getProgressPercentage} from './repository';\nimport {getProgressbarInnerHTML} from './repository';\nimport {getProgressbarInnerHTMLGame} from './repository';\nimport { init as h5plistener } from './cm_h5p_scored_listener';\nimport { init as cmtogglelistener } from './cm_man_compl_toggle';\n\n\n\n// DO NOT USE\nexport const addProgressFromCoreData = async() => {\n    // uses Core Webservice that is not true for ajax -\n    // only usable, if service.php is modified - no option\n    const prbar = document.getElementsByClassName('progress-bar progress-bar-info')[0];\n    const spanElement = document.querySelector('strong.progress-bar-num');\n\n   const user_id = prbar.getAttribute('userid');\n   const course_id = prbar.getAttribute('courseid');\n\n    const response = await getActivityCompletion(user_id, course_id);\n    window.console.log(\"getActivityCompletion----response\", response);\n\n    // Check if the data is valid - JSON.parse returns false - so no check available\n    if (response && response.statuses && Array.isArray(response.statuses)) {\n        let count = 0;\n        let countall = 0;\n\n        response.statuses.forEach(status => {\n            if (status.state > 0) {\n                count++;\n            }\n            countall++;\n        });\n\n        var newwidth = Math.round(count / countall * 100);\n        prbar.style.width = newwidth + '%';\n        spanElement.innerHTML = newwidth + '%';\n    }\n};\n\n\n// Smooth progressbar mod - but only width and innerhtlm values changed\n// potentiell important dependencies in tags are not modified\nexport const changeProgressPercentage = async() => {\n    // ...\n    const prbar = document.getElementsByClassName('progress-bar progress-bar-info')[0];\n    const spanElement = document.querySelector('strong.progress-bar-num');\n\n   //const user_id = prbar.getAttribute('userid');\n    const course_id = prbar.getAttribute('courseid');\n//    const user_id = prbar.getAttribute('userid');\n\n    const response = await getProgressPercentage(course_id);\n    if (response && response.progress) {\n        if (response.warnings.length > 0) {\n            // The warnings array is not empty\n            console.log(\"Warnings:\", response.warnings);\n            // Perform further actions based on the warnings\n          }\n        window.console.log(\"getProgressPercentage----response\", response);\n        // Check if the data is valid - JSON.parse returns false - so no check available\n        var newwidth = response.progress;\n        prbar.style.width = newwidth + '%';\n        spanElement.innerHTML = newwidth + '%';\n    } else {\n        console.log(\"no completion detected\");\n    }\n};\n\n/**\n* USED get course id from body tag\n* Add progress whenever context.id module was not completed on inital load.\n*/\nfunction getCourseIdFromBody() {\n    const bodyTag = document.getElementsByTagName('body')[0];\n    const attributeNames = bodyTag.getAttributeNames();\n    var courseid;\n    attributeNames.forEach(attribute => {\n        const attributeValue = bodyTag.getAttribute(attribute);\n        const regex = /course-(\\d+)/;\n        const matches = attributeValue.match(regex);\n        if (matches) {\n            const courseNumber = matches[0];\n            courseid = courseNumber.split('-')[1];\n            console.log(\"Coursenumber------\", courseid); // Output: course-64\n            return(courseid);\n        }\n    });\n    if(courseid) {\n        return(courseid);\n    } else {\n        return false;\n    }\n}\n\n// reloads whole progress view - it is not as smooth as just changing width\n// on the other hand - the progress bar is correct an unmodified\nexport const changeProgressbar = async() => {\n    // ...\n    //const prbar = document.getElementsByClassName('progress-bar progress-bar-info')[0];\n    //const course_id = prbar.getAttribute('courseid');\n    const course_id = getCourseIdFromBody();\n    if(course_id) {\n        var response = await getProgressbarInnerHTML(course_id);\n       // const responseGAME = await getProgressbarInnerHTMLGame(course_id);\n\n        if (response && response.innerHTML) {\n            window.console.log(\"getProgressbarInnerHTML----response\", response);\n            // Check if the data is valid - JSON.parse returns false - so no check available\n            var innerHTML = response.innerHTML;\n            const prcourseview = document.getElementsByClassName('progress courseview')[0];\n            var elementToReplace = prcourseview;\n            const newElement = document.createElement('div');\n            newElement.innerHTML = innerHTML;\n            const parentElement = elementToReplace.parentNode;\n            parentElement.replaceChild(newElement, elementToReplace);\n\n            // // GAME in progress\n            // var innerHTML = responseGAME.innerHTML;\n            // const prgame = document.getElementsByClassName('gameTable')[0];\n            // const elementToReplaceGAME = prgame;\n            // const newElementGAME = document.createElement('div');\n            // newElementGAME.innerHTML = innerHTML;\n            // const parentElementGAME = elementToReplaceGAME.parentNode;\n            // parentElementGAME.replaceChild(newElementGAME, elementToReplaceGAME);\n\n        } else {\n            console.log(\"no progressbar update available\");\n        }\n        var response = await getProgressbarInnerHTMLGame(course_id);\n\n         if (response && response.innerHTML) {\n            window.console.log(\"getProgressbarInnerHTMLGAME----response\", response);\n            // Check if the data is valid - JSON.parse returns false - so no check available\n             var innerHTML = response.innerHTML;\n\n             // // GAME in progress\n             var innerHTML = response.innerHTML;\n             const prgame = document.getElementsByClassName('gameTable')[0];\n             const elementToReplaceGAME = prgame.parentNode;\n             const newElementGAME = document.createElement('div');\n             newElementGAME.innerHTML = innerHTML;\n             const parentElementGAME = elementToReplaceGAME.parentNode;\n             parentElementGAME.replaceChild(newElementGAME, elementToReplaceGAME);\n\n         } else {\n             console.log(\"no game update possible\");\n             window.console.log(\"getProgressbarInnerHTMLGAME----response\", response);\n\n         }\n\n        return true;\n    } else {\n        console.log(\"no course id detected\");\n        return false;\n    }\n};\n\n\nvar dynprbar_action = changeProgressbar;\n\nexport const init = () => {\n    var prbar = document.getElementsByClassName('progress-bar progress-bar-info')[0];\n    // alert('pr' + pr);\n    // nimm doch das bitte\n    console.log('prbarneusrc' + prbar);\n    if(prbar) {\n        console.log('dynprogressbar----load listener');\n        h5plistener();\n        cmtogglelistener();\n    } else {\n        console.log('dynprogressbar----no listeners loaded due to missing prbar');\n    }\n    window.addEventListener('load', function () {\n        //var pr = document.getElementsByClassName('progress')[0];\n        var prbar = document.getElementsByClassName('progress-bar progress-bar-info')[0];\n       // alert('pr' + pr);\n       // nimm doch das bitte\n        console.log('prbarneusrc' + prbar);\n        // Add an event listener to handle the cmcompleted - send from the own listener to ajax\n        document.addEventListener('cmcompleted', function(event) {\n            console.log('cmcompleted----Custom event triggered:', event.detail.message);\n            // another Option to changeProgressbar or the other 2 Variants of dynprbar_action()\n            // implement wait 300 ms - to give some time to the core events dealing with the completion\n            setTimeout(dynprbar_action, 300);\n            //dynprbar_action();\n        });\n    });\n\n\n    // // https://riptutorial.com/javascript/example/20197/listening-to-ajax-events-at-a-global-level\n    // // Store a reference to the native method\n    // let send = XMLHttpRequest.prototype.send;\n    // //const prbar = document.getElementsByClassName('progress-bar progress-bar-info')[0];\n    // // console.log(document.getElementsByClassName('progress-bar progress-bar-infos')[0]);\n\n    // // Overwrite the native method\n    // XMLHttpRequest.prototype.send = function() {\n    //     // this.addEventListener(\"readystatechange\", function () {\n    //     //     console.log(\"readystatechange-----\");\n    //     // }, false);\n\n    //     // tinjohn get Request Payload from send arguments\n    //     console.log(\"XMLHttpRequest send-----\");\n    //     var payload = arguments[0];\n    //     if(payload === null) {\n    //         send.apply(this, arguments);\n    //         return;\n    //     }\n    //     console.log(\"the payload send-----\" + payload);\n    //     var isValidJSON = true;\n    //     try {\n    //         JSON.parse(payload);\n    //     } catch {\n    //         isValidJSON = false;\n    //     }\n    //     if(isValidJSON) {\n    //         // Assign an event listener\n    //         // and remove it again - to prevent double execution\n    //         // https://www.mediaevent.de/javascript/remove-event-listener.html\n    //         this.addEventListener(\"load\", function removeMe () {\n    //             readAJAXrequestsend(payload);\n    //             this.removeEventListener(\"load\", removeMe);\n    //         }, false);\n    //     }\n    //     // Call the stored reference to the native method\n    //     send.apply(this, arguments);\n    // };\n\n    // /**\n    //  * Reads payload and calls function addProgress (h5p activities need an outside call)\n    //  * or reduces progress bar.\n    //  * @param {payload} payload from request.\n    //  */\n    // function readAJAXrequestsend (payload) {\n    //     var isValidJSON = true;\n    //     try {\n    //         JSON.parse(payload);\n    //     } catch {\n    //         isValidJSON = false;\n    //     }\n    //     if(isValidJSON) {\n    //         const plo = JSON.parse(payload);\n    //         //console.log(plo[0]);\n    //         /*\n    //         console.log(plo[0].methodname);\n    //         console.log(plo[0].args.cmid);\n    //         console.log(plo[0].args.completed);\n    //         */\n    //         // update_activity_completion_status_manually in completion/external.php\n    //         if (plo[0].methodname.match(\"(.*)core_completion_update_activity_completion_status_manually(.*)\"))\n    //         {\n    //             if (plo[0].args.completed) {\n    //                 console.log(\"readAJAXrequestsend-----payload---------\" + payload);\n    //                 //addProgressFromCoreData();\n    //                 //changeProgressPercentage();\n    //                 dynprbar_action();\n    //             } else {\n    //                 var prbar = document.getElementsByClassName('progress-bar progress-bar-info')[0];\n    //                 //addProgressFromCoreData();\n    //                 //changeProgressPercentage();\n    //                 dynprbar_action();\n    //                 var newwidth = parseInt(prbar.style.width) - parseInt(prbar.getAttribute('progress-steps'));\n    //                 if((parseInt(prbar.style.width) - parseInt(prbar.getAttribute('progress-steps'))) < 0) {\n    //                     var newwidth = 0;\n    //                 }\n    //                 console.log(newwidth);\n    //                 //prbar.style.width = newwidth + '%';\n    //             }\n    //         }\n    //         // not possible to hook into XMLHttpRequest for core_xapi_statement_post anymore\n    //         // since moodle > 4.1\n    //         if (plo[0].methodname.match(\"(.*)core_xapi_statement_post(.*)\"))\n    //         {\n    //             isValidJSON = true;\n    //             try {JSON.parse(plo[0].args.requestjson);} catch {isValidJSON = false;}\n    //             if(isValidJSON) {\n    //                 const xapiReq = JSON.parse(plo[0].args.requestjson);\n    //                 //console.log(xapiReq);\n    //                 if (xapiReq[0].result.completion && xapiReq[0].result.success)\n    //                 {\n    //                     // check if initially successed already - in completemods thus send the context id\n    //                     var contextid = xapiReq[0].object.id;\n    //                     var sender = xapiReq[0].actor.account.homepage;\n    //                     // it is an iframe - hook is in the iframe call addProgress to window.parent\n    //                     window.parent.postMessage({method : \"dynprbar_action\", contextid : contextid}, sender);\n    //                 }\n    //             }\n    //         }\n    //         payload = '';\n    //     }\n    // }\n\n    /**\n     * NOT USED\n     * USED for manual completion so far\n     * Add progress whenever context.id module was not completed on inital load.\n     * @param {contextid} contextid the object.id from request.\n     */\n    // function addProgress (contextid) {\n    //     const iframeprbar = document.getElementsByClassName('progress-bar progress-bar-info')[0];\n    //     if(iframeprbar === null) {\n    //         return;\n    //     }\n    //     if(contextid !== null) {\n    //         const completedmods = iframeprbar.getAttribute('completedmods');\n    //         if(completedmods.match('(.*)' + contextid + '(.*)')) {\n    //             //console.log(contextid + \" war schon fertig\");\n    //             return;\n    //         }\n    //     }\n    //     console.log(\"adde progress ---\");\n    //     iframeprbar.style.width = (parseInt(iframeprbar.style.width)\n    //                + parseInt(iframeprbar.getAttribute('progress-steps'))) + '%';\n    // }\n\n    /**\n     * USED for manual completion so far\n     * Add progress whenever context.id module was not completed on inital load.\n     *.\n     */\n       //function addProgressXHR () {\n        // console.log(\"---addProgressXHR-------adde progress ---\");\n        // var xhr = new XMLHttpRequest();\n        // xhr.onreadystatechange = () => {\n        //   if (xhr.readyState == 4) {\n        //     if (xhr.status == 200) {\n        //       console.log(xhr.responseText);\n        //     }\n        //   }\n        // };\n        //var url = '../theme/learnr/addProgress.php';\n        //xhr.open(\"POST\",url);\n        //xhr.send();\n        //}\n\n\n\n//       // Listen to H5P iframe message to get H%P completion statements\n//       window.addEventListener('message', function(e) {\n//         console.log('---got mail from iframe---', e.data);\n// /*         if(e.data.method == 'addProgress') {\n//             const [, contextid] = e.data.contextid.split(/\\/(?=[^\\/]+$)/);\n//             addProgress(contextid);\n//         }\n//  */\n//         // H5PembedIncore_send_core_xapi_statement_post is added to embed.js in core\n//         // no better way found until now\n//         if(e.data.context == 'h5p' && e.data.action == \"H5PembedIncore_send_core_xapi_statement_post\") {\n//             console.log(\"H5PembedIncore_send_core_xapi_statement_post---received->--addProgressFromCoreData---------\");\n//             //dynprbar_action();\n//         }\n//       });\n\n//         // FOLLOWING  WORKING BUT TO early in the event lists - setTimeout is a workaround\n//         // iframe is loaded and all namesspaces are load\n//         document.onreadystatechange = () => {\n//           if (document.readyState === \"complete\") {\n//             if(window && window.document && window.document.h5player\n//                  && window.document.h5player.H5P  && window.document.h5player.H5P.externalDispatcher) {\n//                 var h5pextlDispatcher = window.document.h5player.H5P.externalDispatcher;\n//                 window.document.h5player.H5P.externalDispatcher.on('xAPI', function (event) {\n//                     if(event && event.data && event.data.statement && event.data.statement.result) {\n//                         if(event.data.statement.result.score && event.data.statement.result.score.scaled) {\n//                             console.log('--externalDispatcher-single-',event.data.statement.result);\n//                              var cmcompletedEvent = new CustomEvent('cmcompleted',\n//                             { detail: { message: 'a course module completed or scored' } });\n//                             // // Trigger the custom event\n//                              document.dispatchEvent(cmcompletedEvent);\n//                         }\n//                     }\n//                 }\n//                 );\n//             } else {\n//               // Access the h5pplayer within each window\n//               for (var i = 0; i < window.length; i++) {\n//                   var currentWindow = window[i];\n//                   h5pextlDispatcher = currentWindow.H5P.externalDispatcher;\n//                   if (h5pextlDispatcher) {\n//                       // Perform actions on the h5pplayer element\n//                       console.log(h5pextlDispatcher);\n\n//                       //works but each\n//                       //currentWindow.H5P.externalDispatcher.off('xAPI', handleXAPIEvent);\n//                       currentWindow.H5P.externalDispatcher.on('xAPI',\n//                       function (event) {\n//                         if(event && event.data && event.data.statement && event.data.statement.result) {\n//                             if(event.data.statement.result.score && event.data.statement.result.score.scaled) {\n//                                 console.log('--externalDispatcher----handle-',event.data.statement.result);\n//                                 var cmcompletedEvent = new CustomEvent('cmcompleted',\n//                                  { detail: { message: 'a course module completed or scored' } });\n//                                 // // Trigger the custom event\n//                                  document.dispatchEvent(cmcompletedEvent);\n//                             }\n//                         }\n//                       }\n//                       );\n//                   } else {\n//                       console.log('h5pplayerElement not found', window.length);\n//                   }\n//               }\n//             }\n//           }\n//         };\n\n\n\n//    this.addEventListener(\"load\", function removeMe () {\n        //             readAJAXrequestsend(payload);\n        //             this.removeEventListener(\"load\", removeMe);\n        //         }, false);\n\n    /**\n     * USED for manual completion so far\n     * Add progress whenever context.id module was not completed on inital load.\n     * @param {dispatcher} dispatcher the object.id from request.\n     */\n    // function addH5PextDispatcherListener (dispatcher) {\n    //     console.log(\"in addH5PextDispatcherListener ------\");\n    //     dispatcher.on('xAPI', function(event) {\n    //                 if (event.data.statement.result !== undefined) {\n    //                     var statement = event.data.statement;\n    //                     var success = event.data.statement.result.success;\n    //                     // Your custom code here\n    //                     if(success) {\n    //                         console.log('dynprg externalDispatcher xAPI statement is being sent - success', statement);\n    //                         dynprbar_action();\n    //                         window.parent.postMessage({method : \"dynprbar_action\", contextid : 1}, '');\n    //                     }\n    //                 } else {\n    //                     var statement = event.data.statement;\n    //                     console.log('dynprg externalDispatcher xAPI statement is being sent - not usefull', statement);\n    //                     dynprbar_action();\n    //                     window.parent.postMessage({method : \"dynprbar_action\", contextid : 1}, '');\n    //                 }\n    //     });\n    // }\n\n\n};\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["async","prbar","document","getElementsByClassName","spanElement","querySelector","user_id","getAttribute","course_id","response","window","console","log","statuses","Array","isArray","count","countall","forEach","status","state","newwidth","Math","round","style","width","innerHTML","progress","warnings","length","changeProgressbar","bodyTag","getElementsByTagName","courseid","getAttributeNames","attribute","matches","match","courseNumber","split","getCourseIdFromBody","elementToReplace","newElement","createElement","parentNode","replaceChild","elementToReplaceGAME","newElementGAME","dynprbar_action","addEventListener","event","detail","message","setTimeout"],"mappings":"8YAUuCA,gBAG7BC,MAAQC,SAASC,uBAAuB,kCAAkC,GAC1EC,YAAcF,SAASG,cAAc,2BAEtCC,QAAUL,MAAMM,aAAa,UAC7BC,UAAYP,MAAMM,aAAa,YAE9BE,eAAiB,qCAAsBH,QAASE,cACtDE,OAAOC,QAAQC,IAAI,oCAAqCH,UAGpDA,UAAYA,SAASI,UAAYC,MAAMC,QAAQN,SAASI,UAAW,KAC/DG,MAAQ,EACRC,SAAW,EAEfR,SAASI,SAASK,SAAQC,SAClBA,OAAOC,MAAQ,GACfJ,QAEJC,kBAGAI,SAAWC,KAAKC,MAAMP,MAAQC,SAAW,KAC7ChB,MAAMuB,MAAMC,MAAQJ,SAAW,IAC/BjB,YAAYsB,UAAYL,SAAW,wCAOHrB,gBAE9BC,MAAQC,SAASC,uBAAuB,kCAAkC,GAC1EC,YAAcF,SAASG,cAAc,2BAGrCG,UAAYP,MAAMM,aAAa,YAG/BE,eAAiB,qCAAsBD,cACzCC,UAAYA,SAASkB,SAAU,CAC3BlB,SAASmB,SAASC,OAAS,GAE3BlB,QAAQC,IAAI,YAAaH,SAASmB,UAGtClB,OAAOC,QAAQC,IAAI,oCAAqCH,cAEpDY,SAAWZ,SAASkB,SACxB1B,MAAMuB,MAAMC,MAAQJ,SAAW,IAC/BjB,YAAYsB,UAAYL,SAAW,SAEnCV,QAAQC,IAAI,iCAgCPkB,kBAAoB9B,gBAIvBQ,2BA3BAuB,QAAU7B,SAAS8B,qBAAqB,QAAQ,OAElDC,gBADmBF,QAAQG,oBAEhBhB,SAAQiB,kBAGbC,QAFiBL,QAAQxB,aAAa4B,WAEbE,MADjB,mBAEVD,QAAS,OACHE,aAAeF,QAAQ,UAC7BH,SAAWK,aAAaC,MAAM,KAAK,GACnC5B,QAAQC,IAAI,qBAAsBqB,UAC3BA,aAGZA,WAGQ,EAUOO,MACfhC,UAAW,KA2BNC,aA1BAA,eAAiB,uCAAwBD,aAG7BC,SAASiB,UAAW,CAChChB,OAAOC,QAAQC,IAAI,sCAAuCH,cAEtDiB,UAAYjB,SAASiB,cAErBe,iBADiBvC,SAASC,uBAAuB,uBAAuB,SAEtEuC,WAAaxC,SAASyC,cAAc,OAC1CD,WAAWhB,UAAYA,UACDe,iBAAiBG,WACzBC,aAAaH,WAAYD,uBAYvC9B,QAAQC,IAAI,uCAEZH,eAAiB,2CAA4BD,aAEhCC,SAASiB,UAAW,CACjChB,OAAOC,QAAQC,IAAI,0CAA2CH,UAEzDiB,UAAYjB,SAASiB,UAGrBA,UAAYjB,SAASiB,gBAEnBoB,qBADS5C,SAASC,uBAAuB,aAAa,GACxByC,WAC9BG,eAAiB7C,SAASyC,cAAc,OAC9CI,eAAerB,UAAYA,UACDoB,qBAAqBF,WAC7BC,aAAaE,eAAgBD,2BAG/CnC,QAAQC,IAAI,2BACZF,OAAOC,QAAQC,IAAI,0CAA2CH,iBAI5D,SAEPE,QAAQC,IAAI,0BACL,oDAKXoC,gBAAkBlB,gCAEF,SACZ7B,MAAQC,SAASC,uBAAuB,kCAAkC,GAG9EQ,QAAQC,IAAI,cAAgBX,OACzBA,OACCU,QAAQC,IAAI,uGAIZD,QAAQC,IAAI,8DAEhBF,OAAOuC,iBAAiB,QAAQ,eAExBhD,MAAQC,SAASC,uBAAuB,kCAAkC,GAG9EQ,QAAQC,IAAI,cAAgBX,OAE5BC,SAAS+C,iBAAiB,eAAe,SAASC,OAC9CvC,QAAQC,IAAI,yCAA0CsC,MAAMC,OAAOC,SAGnEC,WAAWL,gBAAiB"}