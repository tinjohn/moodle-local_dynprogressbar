{"version":3,"file":"cm_h5p_scored_listener.min.js","sources":["../src/cm_h5p_scored_listener.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Theme LearnR - JS code cm_h5p_scored_listener\n *\n * @module     local_dynprogressbar/cm_h5p_scored_listener\n * @copyright  2023 Tina John <tina.john@th-luebeck.de>\n * @copyright  Institut fuer interaktive Systeme der TH LÃ¼beck\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getActivityInformationInnerHTML} from './repository';\n\n\nlet registered = false;\n\n/**\n * Function to intialise and register event listeners for this module.\n */\nexport const init = () => {\n    if (registered) {\n        return;\n    }\n    registered = true;\n\n\n  /**\n  * USED for handleXAPIEvent\n  * Add progress whenever context.id module was not completed on inital load.\n  * @param {event} event from Dispatcher.\n  */\n  const handleXAPIEvent = function (event) {\n    if(event && event.data && event.data.statement && event.data.statement.result) {\n          if(event.data.statement.result.score && event.data.statement.result.score.scaled) {\n              console.log('--externalDispatcher-handleXAPIEvent-',event);\n              // Trigger the custom event\n              var cmcompletedEvent = new CustomEvent('cmcompleted',\n              { detail: { message: 'a course module completed or scored' } });\n              // // Trigger the custom event\n              document.dispatchEvent(cmcompletedEvent);\n              const theiframe = this.frameElement;\n              setTimeout(function() {\n                hideCompletionInfo(theiframe); // Call the function with arguments\n              }, 300);\n              //hideCompletionInfo(this.frameElement);\n          }\n      }\n  };\n\n\n  /**\n* USED get course id from body tag\n* Add progress whenever context.id module was not completed on inital load.\n*/\nfunction getCourseIdFromBody() {\n  const bodyTag = document.getElementsByTagName('body')[0];\n  const attributeNames = bodyTag.getAttributeNames();\n  var courseid;\n  attributeNames.forEach(attribute => {\n      const attributeValue = bodyTag.getAttribute(attribute);\n      const regex = /course-(\\d+)/;\n      const matches = attributeValue.match(regex);\n      if (matches) {\n          const courseNumber = matches[0];\n          courseid = courseNumber.split('-')[1];\n          console.log(\"Coursenumber------\", courseid); // Output: course-64\n          return(courseid);\n      }\n  });\n  if(courseid) {\n      return(courseid);\n  } else {\n      return false;\n  }\n}\n\n  const getCmid = (liidelement) => {\n    var courseid;\n    const attributeValue = liidelement.getAttribute('id');\n    const regex = /module-(\\d+)/;\n        const matches = attributeValue.match(regex);\n        if (matches) {\n            const courseNumber = matches[0];\n            courseid = courseNumber.split('-')[1];\n            console.log(\"cmid------\", courseid); // Output: module-341\n            return(courseid);\n        }\n  };\n\n\n  const hideCompletionInfo = async (eventtarget) => {\n    console.log('eventtarget',eventtarget);\n   // var parentElement = document.querySelector('div[data-region=\"completion-info\"] [id=\"childElementID\"]');\n    var element = eventtarget.closest('li > div');\n    const cmid = getCmid(eventtarget.closest('li'));\n    const course_id = getCourseIdFromBody();\n    const response = await getActivityInformationInnerHTML(course_id, cmid);\n    window.console.log(\"getActivityInformationInnerHTML----response\", response.innerHTML);\n\n    var element = element.querySelector('div[data-region=\"activity-information\"]');\n    element.innerHTML = response.innerHTML;\n    return true;\n  };\n\n\n\n//      Listen to H5P iframe message to get H5P completion statements\n      window.addEventListener('message', function(e) {\n        console.log('---got mail from iframe---', e.data);\n/*         if(e.data.method == 'addProgress') {\n            const [, contextid] = e.data.contextid.split(/\\/(?=[^\\/]+$)/);\n            addProgress(contextid);\n        }\n */\n\n        // iframe is loaded and all namesspaces are load\n        if(e.data && e.data.context) {\n          if(e.data.context == \"h5p\" && e.data.action == \"hello\") {\n            addsh5pdispatcherlistener();\n          }\n        }\n\n        // H5PembedIncore_send_core_xapi_statement_post is added to embed.js in core\n        // no better way found until now\n        if(e.data.context == 'h5p' && e.data.action == \"H5PembedIncore_send_core_xapi_statement_post\") {\n            console.log(\"H5PembedIncore_send_core_xapi_statement_post---received->--addProgressFromCoreData---------\");\n            //dynprbar_action();\n        }\n      });\n\n   /**\n   * addsh5pdispatcherlistener\n   * Add progress whenever context.id module was not completed on inital load.\n   */\n    function addsh5pdispatcherlistener () {\n      //for single H5P in a course if the document.onreadystatechange version is preferred\n      // if(window.document.h5player\n      //   && window.document.h5player.H5P && window.document.h5player.H5P.externalDispatcher) {\n      //   console.log('--externalDispatcher-single-gefunden-1-');\n      //   // delete all listeners from H5P.externalDispatcher to get rid of double executions\n      //   // without function due to error with given function as argument\n      //   window.document.h5player.H5P.externalDispatcher.off('xAPI');\n      //   window.document.h5player.H5P.externalDispatcher.on('xAPI', handleXAPIEvent);\n      // }\n\n\n      // FOLLOWING  WORKING BUT TO early in the event lists - setTimeout is a workaround\n        // document.onreadystatechange: iframe is loaded and all namesspaces are loaded\n        // DOES NOT work for single H5P in a course, thus allow multiple listeners to be removed again\n\n        // document.onreadystatechange = () => {\n        //   if (document.readyState === \"complete\") {\n            // the single H5P\n            if(window.document.h5player\n                 && window.document.h5player.H5P && window.document.h5player.H5P.externalDispatcher) {\n                  console.log('dynprogressbar--externalDispatcher-single-gefunden-aka_docready-');\n\n                  var h5pextlDispatcher = window.document.h5player.H5P.externalDispatcher;\n                    // delete all listeners from H5P.externalDispatcher to get rid of double executions\n                    // without function due to error with given function as argument\n                    window.document.h5player.H5P.externalDispatcher.off('xAPI');\n                    window.document.h5player.H5P.externalDispatcher.on('xAPI', function (event) {\n                    if(event && event.data && event.data.statement && event.data.statement.result) {\n                        if(event.data.statement.result.score && event.data.statement.result.score.scaled) {\n                            console.log('dynprogressbar--externalDispatcher-single--',event);\n\n                             var cmcompletedEvent = new CustomEvent('cmcompleted',\n                            { detail: { message: 'a course module completed or scored' } });\n                            // // Trigger the custom event\n                             document.dispatchEvent(cmcompletedEvent);\n                             hideCompletionInfo(window.document);\n                        }\n                    }\n                });\n\n            } else {\n              // Access the h5pplayer within each window\n              for (var i = 0; i < window.length; i++) {\n                  var currentWindow = window[i];\n                  h5pextlDispatcher = currentWindow.H5P.externalDispatcher;\n                  if (h5pextlDispatcher) {\n                      // Perform actions on the h5pplayer element\n                      console.log(\"dynprogressbar---found h5p in window ---\", h5pextlDispatcher);\n                      // delete all listeners from H5P.externalDispatcher to get rid of double executions\n                      // without function due to error with given function as argument\n                      // tried a lot to make it work with function - no success\n                      currentWindow.H5P.externalDispatcher.off('xAPI');\n                      currentWindow.H5P.externalDispatcher.on('xAPI',handleXAPIEvent.bind(currentWindow));\n                      // works fine but codes to messy\n                      // currentWindow.H5P.externalDispatcher.on('xAPI',\n                      // function (event) {\n                      //   if(event && event.data && event.data.statement && event.data.statement.result) {\n                      //       if(event.data.statement.result.score && event.data.statement.result.score.scaled) {\n                      //           console.log('--externalDispatcher----handle-',event.data.statement.result);\n                      //           var cmcompletedEvent = new CustomEvent('cmcompleted',\n                      //            { detail: { message: 'a course module completed or scored' } });\n                      //           // // Trigger the custom event\n                      //            document.dispatchEvent(cmcompletedEvent);\n                      //            hideCompletionInfo(event.target);\n                      //       }\n                      //   }\n                      // }\n                      //);\n                  } else {\n                      console.log('dynprogressbar--h5playerElement not found');\n                  }\n              }\n            }\n//          }\n//        };\n      }\n\n};\n"],"names":["registered","handleXAPIEvent","event","data","statement","result","score","scaled","console","log","cmcompletedEvent","CustomEvent","detail","message","document","dispatchEvent","theiframe","this","frameElement","setTimeout","hideCompletionInfo","async","eventtarget","element","closest","cmid","liidelement","courseid","matches","getAttribute","match","split","getCmid","course_id","bodyTag","getElementsByTagName","getAttributeNames","forEach","attribute","courseNumber","getCourseIdFromBody","response","window","innerHTML","querySelector","addEventListener","e","context","action","h5player","H5P","externalDispatcher","h5pextlDispatcher","off","on","i","length","currentWindow","bind","addsh5pdispatcherlistener"],"mappings":";;;;;;;;;IA2BIA,YAAa,gBAKG,QACZA,kBAGJA,YAAa,QAQTC,gBAAkB,SAAUC,UAC7BA,OAASA,MAAMC,MAAQD,MAAMC,KAAKC,WAAaF,MAAMC,KAAKC,UAAUC,QAC9DH,MAAMC,KAAKC,UAAUC,OAAOC,OAASJ,MAAMC,KAAKC,UAAUC,OAAOC,MAAMC,OAAQ,CAC9EC,QAAQC,IAAI,wCAAwCP,WAEhDQ,iBAAmB,IAAIC,YAAY,cACvC,CAAEC,OAAQ,CAAEC,QAAS,yCAErBC,SAASC,cAAcL,wBACjBM,UAAYC,KAAKC,aACvBC,YAAW,WACTC,mBAAmBJ,aAClB,aA+CTI,mBAAqBC,MAAAA,cACzBb,QAAQC,IAAI,cAAca,iBAEtBC,QAAUD,YAAYE,QAAQ,kBAC5BC,KAlBSC,CAAAA,kBACXC,eAGMC,QAFaF,YAAYG,aAAa,MAEbC,MADrB,mBAENF,eAEAD,SADqBC,QAAQ,GACLG,MAAM,KAAK,GACnCvB,QAAQC,IAAI,aAAckB,UACnBA,UASFK,CAAQV,YAAYE,QAAQ,OACnCS,2BAxCFC,QAAUpB,SAASqB,qBAAqB,QAAQ,OAElDR,gBADmBO,QAAQE,oBAEhBC,SAAQC,kBAGbV,QAFiBM,QAAQL,aAAaS,WAEbR,MADjB,mBAEVF,QAAS,OACHW,aAAeX,QAAQ,UAC7BD,SAAWY,aAAaR,MAAM,KAAK,GACnCvB,QAAQC,IAAI,qBAAsBkB,UAC3BA,aAGZA,WAGQ,EAuBSa,GACZC,eAAiB,+CAAgCR,UAAWR,aAClEiB,OAAOlC,QAAQC,IAAI,8CAA+CgC,SAASE,YAEvEpB,QAAUA,QAAQqB,cAAc,4CAC5BD,UAAYF,SAASE,WACtB,GAMLD,OAAOG,iBAAiB,WAAW,SAASC,GAC1CtC,QAAQC,IAAI,6BAA8BqC,EAAE3C,MAQzC2C,EAAE3C,MAAQ2C,EAAE3C,KAAK4C,SACG,OAAlBD,EAAE3C,KAAK4C,SAAqC,SAAjBD,EAAE3C,KAAK6C,sBAoChCN,OAAO5B,SAASmC,UACXP,OAAO5B,SAASmC,SAASC,KAAOR,OAAO5B,SAASmC,SAASC,IAAIC,mBAAoB,CACnF3C,QAAQC,IAAI,wEAER2C,kBAAoBV,OAAO5B,SAASmC,SAASC,IAAIC,mBAGnDT,OAAO5B,SAASmC,SAASC,IAAIC,mBAAmBE,IAAI,QACpDX,OAAO5B,SAASmC,SAASC,IAAIC,mBAAmBG,GAAG,QAAQ,SAAUpD,UAClEA,OAASA,MAAMC,MAAQD,MAAMC,KAAKC,WAAaF,MAAMC,KAAKC,UAAUC,QAChEH,MAAMC,KAAKC,UAAUC,OAAOC,OAASJ,MAAMC,KAAKC,UAAUC,OAAOC,MAAMC,OAAQ,CAC9EC,QAAQC,IAAI,8CAA8CP,WAErDQ,iBAAmB,IAAIC,YAAY,cACxC,CAAEC,OAAQ,CAAEC,QAAS,yCAEpBC,SAASC,cAAcL,kBACvBU,mBAAmBsB,OAAO5B,uBAOpC,IAAIyC,EAAI,EAAGA,EAAIb,OAAOc,OAAQD,IAAK,KAChCE,cAAgBf,OAAOa,IAC3BH,kBAAoBK,cAAcP,IAAIC,qBAGlC3C,QAAQC,IAAI,2CAA4C2C,mBAIxDK,cAAcP,IAAIC,mBAAmBE,IAAI,QACzCI,cAAcP,IAAIC,mBAAmBG,GAAG,OAAOrD,gBAAgByD,KAAKD,iBAiBpEjD,QAAQC,IAAI,8CAtFtBkD,GAMiB,OAAlBb,EAAE3C,KAAK4C,SAAqC,gDAAjBD,EAAE3C,KAAK6C,QACjCxC,QAAQC,IAAI"}